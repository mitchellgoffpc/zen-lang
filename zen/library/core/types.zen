(import js)
(import Set :from js/util :as JS-Set)
(import Map :from js/util :as JS-Map)


;; Forward declarations
(class Boolean
    (init (value|bool) (self.__value = value.__value))
    (init (value|int)  (init (if value true false)))
    (init (value|str)  (init (not (value :empty?)))))


(class Integer
    (init (value|bool) (init (if self 1 0)))
    (init (value|int)  (self.__value == value.__value))
    (init (value|str)  (init (js/string-to-int self.__value))))


(class String
    (init (value|bool) (init (if value "true" "false")))
    (init (value|int)  (init (js/int-to-string value.__value)))
    (init (value|str)  (self.__value = value.__value))

    ;;;
    (init (& args)
        (args :map (x -> :as String} | :join "")))
    ;;;

    (def (:empty?) (self :length == 0))
    (def (:length) (js/int self.__value.length)))

(class Array)
(class Set)

;;;;
(class Set
    (init (& args)
        (self.js-set = (js/new JS-Set))
        (self :add & args))

    (def (:size)
        (js/int self.js-set.size))

    (def (:empty?)
        (self :size == 0))

    ;;;
    (def (:add & args)
        (args :each | arg ->
            (self.js-set.add arg))))
    ;;;)
;;;;

(def print (x)
    (js/log (str x)))

;; Type aliases
(bool = Boolean)
(int = Integer)
(str = String)
(array = Array)


;;;
;; Some examples
(def factorial (0) 1)
(def factorial (1) 1)
(def factorial (n) (factorial (n - 1) + factorial (n - 2)))

(def-case factorial (n)
    (n = 0) -> 1
    (n = 1) -> 1
    :otherwise -> (factorial (n - 1) + factorial (n - 2)))

(result := (case
    (x = 0) -> 1
    (x = 1) -> 1
    :otherwise -> some-value
    :where (x := 5 + 5)))

(def head ()
    (error "You can't call head on an empty list, dummy!"))
(def head (x & _) x)
;;;
